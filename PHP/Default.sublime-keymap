[
    // ------------------------------------------------------------------------
    // Format empty array on Enter
    // ------------------------------------------------------------------------
    {
        // ## Example
        //
        // $arr = array(|)  | $arr = array(
        //                  |     |
        //                  | )
        "keys": ["enter"],
        "command": "run_macro_file",
        "args": {"file": "res://Packages/PHP/macros/wrap-newlines.sublime-macro"},
        "context": [
            { "key": "setting.command_mode", "operand": false },
            { "key": "setting.auto_indent", "operator": "equal", "operand": true },
            { "key": "selector", "operator": "equal", "operand": "source.php meta.array.empty", "match_all": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true }
        ]
    },

    // ------------------------------------------------------------------------
    // Format on Enter
    // ------------------------------------------------------------------------
    {
        // ## Examples
        //
        // function_call(|)            | function_call(
        //                             |     |
        //                             | )
        //
        // new class_name(|)           | new class_name(
        //                             |     |
        //                             | )
        //
        "keys": ["enter"],
        "command": "run_macro_file",
        "args": {"file": "res://Packages/PHP/macros/wrap-newlines.sublime-macro"},
        "context": [
            { "key": "setting.command_mode", "operand": false },
            { "key": "setting.auto_indent", "operator": "equal", "operand": true },
            { "key": "selector", "operator": "equal", "operand": "source.php", "match_all": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "[a-zA-Z_][a-zA-Z0-9_]*\\s*\\(\\s*$", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\)\\s*$", "match_all": true }
        ]
    },

    // ------------------------------------------------------------------------
    // Auto complete array " => " on Tab within array declarations
    // ------------------------------------------------------------------------
    //
    // ## Examples
    //
    // $arr = array(               | $arr = array(
    //     'str|'                  |     'str' => |
    // )                           | )
    //
    // $arr = array(               | $arr = array(
    //     'str'|                  |     'str' => |
    // )                           | )
    //
    {
        "keys": ["tab"],
        "command": "run_macro_file",
        "args": {"file": "res://Packages/PHP/macros/auto-array-equals-gt.sublime-macro"},
        "context": [
            { "key": "setting.command_mode", "operand": false },
            { "key": "setting.auto_indent", "operator": "equal", "operand": true },
            { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "source.php meta.array", "match_all": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*('|\")[^'\"]*('|\")\\s*$", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true }
        ]
    },
    {
        "keys": ["tab"],
        "command": "run_macro_file",
        "args": {"file": "res://Packages/PHP/macros/auto-array-equals-gt.sublime-macro"},
        "context": [
            { "key": "setting.command_mode", "operand": false },
            { "key": "setting.auto_indent", "operator": "equal", "operand": true },
            { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "source.php meta.array", "match_all": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*('|\")[^'\"]*$", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^('|\")\\s*$", "match_all": true }
        ]
    },

    // ------------------------------------------------------------------------
    // Auto complete eol comma within array declaration
    // ------------------------------------------------------------------------
    {
        // ## Example
        //
        // $arr = array(    | $arr = array(
        //     'str|'       |     'str',
        // )                |     |
        //                  | )
        //
        "keys": ["ctrl+enter"],
        "command": "run_macro_file",
        "args": {"file": "res://Packages/PHP/macros/append-comma-newline.sublime-macro"},
        "context": [
            { "key": "setting.command_mode", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "source.php meta.array string.quoted", "match_all": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "('|\")$", "match_all": true }
        ]
    },

    // ---------------------------
    // Smart completion: semicolon
    // ---------------------------

    {
        "keys": ["ctrl+;"],
        "command": "run_macro_file",
        "args": {"file": "res://Packages/PHP/macros/append-semicolon.sublime-macro"},
        "context": [
            { "key": "setting.command_mode", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "source.php", "match_all": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "('|\"|\\)|\\])$", "match_all": true }
        ]
    },
    {
        "keys": ["ctrl+enter"],
        "command": "run_macro_file",
        "args": {"file": "res://Packages/PHP/macros/append-semicolon-newline.sublime-macro"},
        "context": [
            { "key": "setting.command_mode", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "source.php - meta.array string.quoted", "match_all": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "('|\"|\\)|\\])$", "match_all": true }
        ]
    },
    {
        "keys": ["["],
        "command": "insert_snippet",
        "args": {"contents": "[$0];"},
        "context": [
            { "key": "setting.command_mode", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "source.php", "match_all": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "\\$[a-zA-Z_][a-zA-Z0-9_]*\\s*=\\s*$", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true }
        ]
    },
    {
        "keys": ["]"],
        "command": "insert_snippet",
        "args": {"contents": "$0];"},
        "context": [
            { "key": "setting.command_mode", "operand": false },
            { "key": "selector", "operator": "equal", "operand": "source.php meta.array.php", "match_all": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "\\$[a-zA-Z_][a-zA-Z0-9_]*\\s*=\\s*\\[$", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true }
        ]
    }
]
